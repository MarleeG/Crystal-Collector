{"ast":null,"code":"import _classCallCheck from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/src/App.js\";\nimport React, { Component } from 'react';\nimport { ListGroup, ListGroupItem, Grid, Row, Col, Modal, Button } from 'react-bootstrap';\nimport './App.css';\nimport Header from './components/header';\nimport Crystals from './components/crystals';\nimport RedCrystal from './components/assets/red_crystal.png';\nimport BlueCrystal from './components/assets/blue_crystal.png';\nimport GreenCrystal from './components/assets/green_crystal.png';\nimport BlackCrystal from './components/assets/black_crystal.png';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.directionsModal = _this.directionsModal.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClose = _this.handleClose.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.generateRandomNumber = _this.generateRandomNumber.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.generateCrystalValues = _this.generateCrystalValues.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addCrystalValue = _this.addCrystalValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.checkingScore = _this.checkingScore.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.newCrystalValues = _this.newCrystalValues.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      randomNumber: 0,\n      crystals: [{\n        crystal: 'Red',\n        value: _this.generateCrystalValues(),\n        img: RedCrystal\n      }, {\n        crystal: 'Blue',\n        value: _this.generateCrystalValues(),\n        img: BlueCrystal\n      }, {\n        crystal: 'Black',\n        value: _this.generateCrystalValues(),\n        img: BlackCrystal\n      }, {\n        crystal: 'Green',\n        value: _this.generateCrystalValues(),\n        img: GreenCrystal\n      }],\n      userTotal: 0,\n      wins: 0,\n      losses: 0,\n      show: false,\n      numberStyles: {\n        borderColor: 'black'\n      }\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        randomNumber: this.generateRandomNumber()\n      });\n    }\n  }, {\n    key: \"generateRandomNumber\",\n    value: function generateRandomNumber() {\n      return Math.floor(Math.random() * 102) + 19;\n    }\n  }, {\n    key: \"generateCrystalValues\",\n    value: function generateCrystalValues() {\n      return Math.floor(Math.random() * 12) + 1;\n    }\n  }, {\n    key: \"newCrystalValues\",\n    value: function newCrystalValues() {\n      var _this2 = this;\n\n      var crystals = this.state.crystals;\n      crystals.map(function (element) {\n        return element.value = _this2.generateCrystalValues();\n      });\n    }\n  }, {\n    key: \"addCrystalValue\",\n    value: function addCrystalValue(crystal, value) {\n      var _this3 = this;\n\n      console.log(\"crystal: \".concat(crystal, \" || value: \").concat(value));\n      this.setState({\n        userTotal: this.state.userTotal + value,\n        numberStyles: {\n          borderColor: crystal\n        }\n      }, function () {\n        return _this3.checkingScore();\n      });\n    }\n  }, {\n    key: \"checkingScore\",\n    value: function checkingScore() {\n      if (this.state.randomNumber === this.state.userTotal) {\n        this.setState({\n          wins: this.state.wins + 1,\n          userTotal: 0,\n          randomNumber: this.generateRandomNumber(),\n          numberStyles: {\n            borderColor: 'black'\n          }\n        });\n        this.newCrystalValues();\n      } else if (this.state.randomNumber < this.state.userTotal) {\n        this.setState({\n          losses: this.state.losses + 1,\n          userTotal: 0,\n          randomNumber: this.generateRandomNumber(),\n          numberStyles: {\n            borderColor: 'black'\n          }\n        });\n        this.newCrystalValues();\n      }\n    }\n  }, {\n    key: \"handleClose\",\n    value: function handleClose() {\n      this.setState({\n        show: false\n      });\n    }\n  }, {\n    key: \"directionsModal\",\n    value: function directionsModal() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Modal, {\n        show: this.state.show,\n        onHide: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Modal.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Modal.Title, {\n        className: \"text-center directions-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"How to play\")), React.createElement(Modal.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"You will be given a random number at the start of the game.\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"There are four crystals to click on. By clicking on a crystal you will add a specific amount of points to your total score.\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \" You win the game by matching your total score to the random number, you lose the game if your total score goes above the random number.\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"The value of each crystal is hidden from until you click on it.\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Each time when the game starts, the game will change the values of each crystal.\")), React.createElement(Modal.Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.handleClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Close\"))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      return React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), this.directionsModal(), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Col, {\n        md: 6,\n        mdPush: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"numbers\",\n        style: this.state.numberStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Wins: \", this.state.wins), React.createElement(\"h4\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Losses: \", this.state.losses))), React.createElement(Col, {\n        md: 6,\n        mdPull: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"numbers\",\n        style: this.state.numberStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"Random Number: \", this.state.randomNumber), React.createElement(\"h4\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Total: \", this.state.userTotal)))), React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(Row, {\n        className: \"show-grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Crystals, {\n        addCrystalValue: function addCrystalValue(crystal, value) {\n          return _this4.addCrystalValue(crystal, value);\n        },\n        crystals: this.state.crystals,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/src/App.js"],"names":["React","Component","ListGroup","ListGroupItem","Grid","Row","Col","Modal","Button","Header","Crystals","RedCrystal","BlueCrystal","GreenCrystal","BlackCrystal","App","props","directionsModal","bind","handleClose","generateRandomNumber","generateCrystalValues","addCrystalValue","checkingScore","newCrystalValues","state","randomNumber","crystals","crystal","value","img","userTotal","wins","losses","show","numberStyles","borderColor","setState","Math","floor","random","map","element","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ListGroup, ListGroupItem, Grid, Row, Col, Modal, Button } from 'react-bootstrap';\n\nimport './App.css'\nimport Header from './components/header';\nimport Crystals from './components/crystals';\nimport RedCrystal from './components/assets/red_crystal.png';\nimport BlueCrystal from './components/assets/blue_crystal.png';\nimport GreenCrystal from './components/assets/green_crystal.png';\nimport BlackCrystal from './components/assets/black_crystal.png';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.directionsModal = this.directionsModal.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.generateRandomNumber = this.generateRandomNumber.bind(this);\n    this.generateCrystalValues = this.generateCrystalValues.bind(this);\n    this.addCrystalValue = this.addCrystalValue.bind(this);\n    this.checkingScore = this.checkingScore.bind(this);\n    this.newCrystalValues = this.newCrystalValues.bind(this);\n\n    this.state = {\n      randomNumber: 0,\n      crystals: [\n        { crystal: 'Red', value: this.generateCrystalValues(), img: RedCrystal },\n        { crystal: 'Blue', value: this.generateCrystalValues(), img: BlueCrystal },\n        { crystal: 'Black', value: this.generateCrystalValues(), img: BlackCrystal },\n        { crystal: 'Green', value: this.generateCrystalValues(), img: GreenCrystal }\n      ],\n      userTotal: 0,\n      wins: 0,\n      losses: 0,\n      show: false,\n      numberStyles:{\n        borderColor: 'black'\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      randomNumber: this.generateRandomNumber()\n    })\n  }\n\n  generateRandomNumber() {\n    return Math.floor(Math.random() * 102) + 19\n  }\n\n  generateCrystalValues() {\n    return Math.floor(Math.random() * 12) + 1\n  }\n\n  newCrystalValues() {\n    var crystals = this.state.crystals\n    crystals.map(element => {\n      return element.value = this.generateCrystalValues()\n    })\n  }\n\n  addCrystalValue(crystal, value) {\n    console.log(`crystal: ${crystal} || value: ${value}`)\n    this.setState({\n      userTotal: this.state.userTotal + value,\n      numberStyles: {\n        borderColor: crystal\n      }\n    }, () => this.checkingScore())\n  }\n\n  checkingScore() {\n    if (this.state.randomNumber === this.state.userTotal) {\n      this.setState({\n        wins: this.state.wins + 1,\n        userTotal: 0,\n        randomNumber: this.generateRandomNumber(),\n        numberStyles: {\n          borderColor: 'black'\n        }\n      })\n      this.newCrystalValues();\n    } else if (this.state.randomNumber < this.state.userTotal) {\n      this.setState({\n        losses: this.state.losses + 1,\n        userTotal: 0,\n        randomNumber: this.generateRandomNumber(),\n        numberStyles: {\n          borderColor: 'black'\n        }\n      })\n      this.newCrystalValues();\n    }\n  }\n\n  handleClose() {\n    this.setState({ show: false })\n  }\n\n  directionsModal() {\n    return (\n      <div >\n        <Modal show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header>\n            <Modal.Title className='text-center directions-title'>How to play</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <p>You will be given a random number at the start of the game.</p>\n            <p>There are four crystals to click on. By clicking on a crystal you will add a specific amount of points to your total score.</p>\n            <p> You win the game by matching your total score to the random number, you lose the game if your total score goes above the random number.</p>\n            <p>The value of each crystal is hidden from until you click on it.</p>\n            <p>Each time when the game starts, the game will change the values of each crystal.</p>\n          </Modal.Body>\n\n          <Modal.Footer>\n            <Button onClick={this.handleClose}>Close</Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className='body'>\n        <Header />\n        {this.directionsModal()}\n        <div>\n          <Row className=\"show-grid\">\n            <Col md={6} mdPush={6}>\n              <div className='numbers' style={this.state.numberStyles}>\n                <h4 className='text-center' >Wins: {this.state.wins}</h4>\n                <h4 className='text-center'>Losses: {this.state.losses}</h4>\n              </div>\n            </Col>\n            <Col md={6} mdPull={6}>\n              <div className='numbers' style={this.state.numberStyles}>\n                <h4 className='text-center'>Random Number: {this.state.randomNumber}</h4>\n                <h4 className='text-center'>Total: {this.state.userTotal}</h4>\n              </div>\n            </Col>\n          </Row>\n\n          <Grid>\n            <Row className=\"show-grid\">\n              <Crystals addCrystalValue={(crystal, value) => this.addCrystalValue(crystal, value)} crystals={this.state.crystals} />\n            </Row>\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}