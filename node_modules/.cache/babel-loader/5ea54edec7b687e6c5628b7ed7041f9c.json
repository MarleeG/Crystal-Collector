{"ast":null,"code":"import _classCallCheck from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/crystal_collector/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/crystal_collector/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/crystal_collector/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/crystal_collector/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/crystal_collector/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/crystal_collector/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/crystal_collector/src/App.js\";\nimport React, { Component } from 'react';\nimport { ListGroup, ListGroupItem } from 'react-bootstrap';\nimport Header from './components/header';\nimport Crystals from './components/crystals';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.generateRandomNumber = _this.generateRandomNumber.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.generateCrystalValues = _this.generateCrystalValues.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.addCrystalValue = _this.addCrystalValue.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.checkingScore = _this.checkingScore.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      randomNumber: 0,\n      crystals: [{\n        crystal: 'Gold',\n        value: _this.generateCrystalValues()\n      }, {\n        crystal: 'Blue',\n        value: _this.generateCrystalValues()\n      }, {\n        crystal: 'Black',\n        value: _this.generateCrystalValues()\n      }, {\n        crystal: 'Green',\n        value: _this.generateCrystalValues()\n      }],\n      userTotal: 0,\n      wins: 0,\n      losses: 0\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        randomNumber: this.generateRandomNumber()\n      });\n    }\n  }, {\n    key: \"generateRandomNumber\",\n    value: function generateRandomNumber() {\n      return Math.floor(Math.random() * 102) + 19;\n    }\n  }, {\n    key: \"generateCrystalValues\",\n    value: function generateCrystalValues() {\n      return Math.floor(Math.random() * 12) + 1;\n    }\n  }, {\n    key: \"addCrystalValue\",\n    value: function addCrystalValue(crystal, value) {\n      var _this2 = this;\n\n      console.log(\"crystal: \".concat(crystal, \" || value: \").concat(value));\n      this.setState({\n        userTotal: this.state.userTotal + value\n      }, function () {\n        return _this2.checkingScore();\n      });\n    }\n  }, {\n    key: \"checkingScore\",\n    value: function checkingScore() {\n      if (this.state.randomNumber === this.state.userTotal) {\n        this.setState({\n          wins: this.state.wins++\n        });\n        this.generateRandomNumber();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Random Number: \", this.state.randomNumber)), React.createElement(ListGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(ListGroupItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Item 1\"), React.createElement(ListGroupItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Item 2\"), React.createElement(ListGroupItem, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"...\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Total: \", this.state.userTotal)), React.createElement(Crystals, {\n        addCrystalValue: function addCrystalValue(crystal, value) {\n          return _this3.addCrystalValue(crystal, value);\n        },\n        crystals: this.state.crystals,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/ChristinaGerard/Desktop/personal_projects/Crystal-Collector/crystal_collector/src/App.js"],"names":["React","Component","ListGroup","ListGroupItem","Header","Crystals","App","props","generateRandomNumber","bind","generateCrystalValues","addCrystalValue","checkingScore","state","randomNumber","crystals","crystal","value","userTotal","wins","losses","setState","Math","floor","random","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ListGroup, ListGroupItem } from 'react-bootstrap'\n\nimport Header from './components/header';\nimport Crystals from './components/crystals'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.generateRandomNumber = this.generateRandomNumber.bind(this);\n    this.generateCrystalValues = this.generateCrystalValues.bind(this);\n    this.addCrystalValue = this.addCrystalValue.bind(this);\n    this.checkingScore = this.checkingScore.bind(this)\n\n\n    this.state = {\n      randomNumber: 0,\n      crystals: [\n        { crystal: 'Gold', value: this.generateCrystalValues() },\n        { crystal: 'Blue', value: this.generateCrystalValues() },\n        { crystal: 'Black', value: this.generateCrystalValues() },\n        { crystal: 'Green', value: this.generateCrystalValues() }\n      ],\n      userTotal: 0,\n      wins: 0,\n      losses: 0\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      randomNumber: this.generateRandomNumber()\n    })\n  }\n\n  generateRandomNumber() {\n    return Math.floor(Math.random() * 102) + 19\n  }\n\n  generateCrystalValues() {\n    return Math.floor(Math.random() * 12) + 1\n  }\n\n  addCrystalValue(crystal, value) {\n    console.log(`crystal: ${crystal} || value: ${value}`)\n    this.setState({\n      userTotal: this.state.userTotal + value\n    }, () => this.checkingScore())\n  }\n\n  checkingScore() {\n    if (this.state.randomNumber === this.state.userTotal) {\n      this.setState({\n        wins: this.state.wins++\n      })\n      this.generateRandomNumber();\n    }\n  }\n\n  render() {\n    return (\n      <div>\n\n        <Header />\n        <div>\n          <h3>\n            Random Number: {this.state.randomNumber}\n          </h3>\n        </div>\n\n        <ListGroup>\n          <ListGroupItem>Item 1</ListGroupItem>\n          <ListGroupItem>Item 2</ListGroupItem>\n          <ListGroupItem>...</ListGroupItem>\n        </ListGroup>\n\n\n      <div>\n          <h3>\n            Total: {this.state.userTotal}\n          </h3>\n        </div>\n\n        <Crystals addCrystalValue={(crystal, value) => this.addCrystalValue(crystal, value)} crystals={this.state.crystals} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}